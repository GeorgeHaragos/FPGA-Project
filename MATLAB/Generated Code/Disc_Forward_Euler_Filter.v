// -------------------------------------------------------------
// 
// File Name: hdlsrc/PIDforVerilog/Disc_Forward_Euler_Filter.v
// Created: 2025-06-05 14:36:24
// 
// Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Disc_Forward_Euler_Filter
// Source Path: PIDforVerilog/Discrete PID Controller/Filter/Disc. Forward Euler Filter
// Hierarchy Level: 3
// Model version: 1.1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Disc_Forward_Euler_Filter
          (clk,
           reset,
           enb,
           U,
           Nout,
           Y);


  input   clk;
  input   reset;
  input   enb;
  input   signed [31:0] U;  // sfix32_En16
  input   signed [31:0] Nout;  // sfix32_En16
  output  signed [31:0] Y;  // sfix32_En16


  wire signed [31:0] Filter_indtc;  // sfix32
  wire signed [32:0] gain_cast;  // sfix33_En7
  wire signed [31:0] Filter_u_gain;  // sfix32
  wire signed [31:0] Filter_u_dtc;  // sfix32_En16
  reg signed [31:0] Filter_x_reg;  // sfix32_En16
  wire signed [32:0] adder_add_cast;  // sfix33_En16
  wire signed [32:0] adder_add_cast_1;  // sfix33_En16
  wire signed [32:0] adder_add_temp;  // sfix33_En16
  wire signed [31:0] Filter_u_add;  // sfix32_En16
  wire signed [32:0] SumD_sub_cast;  // sfix33_En16
  wire signed [32:0] SumD_sub_cast_1;  // sfix33_En16
  wire signed [32:0] SumD_sub_temp;  // sfix33_En16
  wire signed [31:0] SumD_out1;  // sfix32_En16


  assign Filter_indtc = Nout;

  assign gain_cast = {Filter_indtc[31], Filter_indtc};
  assign Filter_u_gain = {{6{gain_cast[32]}}, gain_cast[32:7]};

  assign Filter_u_dtc = Filter_u_gain;

  assign adder_add_cast = {Filter_x_reg[31], Filter_x_reg};
  assign adder_add_cast_1 = {Filter_u_dtc[31], Filter_u_dtc};
  assign adder_add_temp = adder_add_cast + adder_add_cast_1;
  assign Filter_u_add = ((adder_add_temp[32] == 1'b0) && (adder_add_temp[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((adder_add_temp[32] == 1'b1) && (adder_add_temp[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(adder_add_temp[31:0])));

  always @(posedge clk or posedge reset)
    begin : Filter_reg_process
      if (reset == 1'b1) begin
        Filter_x_reg <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Filter_x_reg <= Filter_u_add;
        end
      end
    end

  assign SumD_sub_cast = {U[31], U};
  assign SumD_sub_cast_1 = {Filter_x_reg[31], Filter_x_reg};
  assign SumD_sub_temp = SumD_sub_cast - SumD_sub_cast_1;
  assign SumD_out1 = ((SumD_sub_temp[32] == 1'b0) && (SumD_sub_temp[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((SumD_sub_temp[32] == 1'b1) && (SumD_sub_temp[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(SumD_sub_temp[31:0])));

  assign Y = SumD_out1;

endmodule  // Disc_Forward_Euler_Filter

