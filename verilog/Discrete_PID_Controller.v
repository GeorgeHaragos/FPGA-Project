// -------------------------------------------------------------
// 
// File Name: /Users/andu/Documents/MATLAB/PID/Discrete_PID_Controller.v
// Created: 2025-05-29 12:54:40
// 
// Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Discrete_PID_Controller
// Source Path: PID/Discrete PID Controller
// Hierarchy Level: 1
// Model version: 1.37
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Discrete_PID_Controller
          (clk,
           reset,
           enb_1_2_0,
           u,
           y);


  input   clk;
  input   reset;
  input   enb_1_2_0;
  input   signed [31:0] u;  // sfix32_En16
  output  signed [31:0] y;  // sfix32_En16


  wire signed [63:0] Proportional_Gain_cast;  // sfix64_En32
  wire signed [31:0] Proportional_Gain_out1;  // sfix32_En16
  wire signed [31:0] Clamping_zero_out1;  // sfix32_En16
  wire signed [7:0] Constant2_out1;  // int8
  wire signed [31:0] Integral_Gain_out1;  // sfix32_En16
  wire fix_for_DT_propagation_issue1_out1;
  wire switch_compare_1;
  wire signed [7:0] Constant4_out1;  // int8
  wire signed [7:0] Constant_out1;  // int8
  wire signed [7:0] Constant3_out1;  // int8
  wire signed [7:0] Switch2_out1;  // int8
  wire signed [31:0] Constant1_out1;  // sfix32_En16
  wire signed [31:0] error_signal;  // sfix32_En16
  wire signed [31:0] error_signal_1;  // sfix32_En16
  wire signed [63:0] Derivative_Gain_mul_temp;  // sfix64_En32
  wire signed [31:0] Derivative_Gain_out1;  // sfix32_En16
  wire signed [31:0] Filter_Coefficient_out1;  // sfix32_En16
  wire signed [31:0] Filter_indtc;  // sfix32
  wire signed [32:0] gain_cast;  // sfix33_En7
  wire signed [31:0] Filter_u_gain;  // sfix32
  wire signed [31:0] Filter_u_dtc;  // sfix32_En16
  reg signed [31:0] Filter_x_reg;  // sfix32_En16
  wire signed [32:0] adder_add_cast;  // sfix33_En16
  wire signed [32:0] adder_add_cast_1;  // sfix33_En16
  wire signed [32:0] adder_add_temp;  // sfix33_En16
  wire signed [31:0] Filter_u_add;  // sfix32_En16
  wire signed [32:0] SumD_sub_cast;  // sfix33_En16
  wire signed [32:0] SumD_sub_cast_1;  // sfix33_En16
  wire signed [32:0] SumD_sub_temp;  // sfix33_En16
  wire signed [31:0] SumD_out1;  // sfix32_En16
  wire signed [63:0] Filter_Coefficient_mul_temp;  // sfix64_En32
  wire signed [31:0] DeadZone_out1;  // sfix32_En16
  wire fix_for_DT_propagation_issue_out1;
  wire switch_compare_1_1;
  wire signed [7:0] Switch1_out1;  // int8
  wire Equal1_out1;
  wire signed [31:0] Sum_out1;  // sfix32_En16
  wire Relational_Operator_out1;
  wire AND3_out1;
  wire switch_compare_1_2;
  wire signed [31:0] Switch_out1;  // sfix32_En16
  wire signed [31:0] Integrator_indtc;  // sfix32
  wire signed [32:0] gain1_cast;  // sfix33_En7
  wire signed [31:0] Integrator_u_gain;  // sfix32
  wire signed [31:0] Integrator_u_dtc;  // sfix32_En16
  reg signed [31:0] Integrator_x_reg;  // sfix32_En16
  wire signed [32:0] adder1_add_cast;  // sfix33_En16
  wire signed [32:0] adder1_add_cast_1;  // sfix33_En16
  wire signed [32:0] adder1_add_temp;  // sfix33_En16
  wire signed [31:0] Integrator_u_add;  // sfix32_En16
  wire signed [31:0] Integrator_u_sat;  // sfix32_En16
  wire signed [32:0] Sum_stage2_add_cast;  // sfix33_En16
  wire signed [32:0] Sum_stage2_add_cast_1;  // sfix33_En16
  wire signed [32:0] Sum_stage2_add_temp;  // sfix33_En16
  wire signed [31:0] Sum_stage2_cast;  // sfix32_En16
  wire signed [32:0] Sum_op_stage1;  // sfix33_En16
  wire signed [31:0] Sum_stage3_add_cast;  // sfix32_En16
  wire signed [32:0] Sum_stage3_add_cast_1;  // sfix33_En16
  wire signed [32:0] Sum_stage3_add_cast_2;  // sfix33_En16
  wire signed [32:0] Sum_stage3_add_temp;  // sfix33_En16
  wire signed [31:0] Saturation_out1;  // sfix32_En16

  // Feedback Features
  // Derivative
  // Integrator


  assign Proportional_Gain_cast = {{30{u[31]}}, {u, 2'b00}};
  assign Proportional_Gain_out1 = ((Proportional_Gain_cast[63] == 1'b0) && (Proportional_Gain_cast[62:47] != 16'b0000000000000000) ? 32'sb01111111111111111111111111111111 :
              ((Proportional_Gain_cast[63] == 1'b1) && (Proportional_Gain_cast[62:47] != 16'b1111111111111111) ? 32'sb10000000000000000000000000000000 :
              $signed(Proportional_Gain_cast[47:16])));

  assign Clamping_zero_out1 = 32'sb00000000000000000000000000000000;

  assign Constant2_out1 = 8'sb11111111;

  assign Integral_Gain_out1 = 32'sb00000000000000000000000000000000;

  assign fix_for_DT_propagation_issue1_out1 = Integral_Gain_out1 > Clamping_zero_out1;

  assign switch_compare_1 = fix_for_DT_propagation_issue1_out1 > 1'b0;

  assign Constant4_out1 = 8'sb11111111;

  assign Constant_out1 = 8'sb00000001;

  assign Constant3_out1 = 8'sb00000001;

  assign Switch2_out1 = (switch_compare_1 == 1'b0 ? Constant4_out1 :
              Constant3_out1);

  assign Constant1_out1 = 32'sb00000000000000000000000000000000;

  assign error_signal = u;

  assign error_signal_1 = error_signal;

  assign Derivative_Gain_mul_temp = 32'sb00000000000000000000001010001111 * error_signal_1;
  assign Derivative_Gain_out1 = ((Derivative_Gain_mul_temp[63] == 1'b0) && (Derivative_Gain_mul_temp[62:47] != 16'b0000000000000000) ? 32'sb01111111111111111111111111111111 :
              ((Derivative_Gain_mul_temp[63] == 1'b1) && (Derivative_Gain_mul_temp[62:47] != 16'b1111111111111111) ? 32'sb10000000000000000000000000000000 :
              $signed(Derivative_Gain_mul_temp[47:16])));

  assign Filter_indtc = Filter_Coefficient_out1;

  assign gain_cast = {Filter_indtc[31], Filter_indtc};
  assign Filter_u_gain = {{6{gain_cast[32]}}, gain_cast[32:7]};

  assign Filter_u_dtc = Filter_u_gain;

  assign adder_add_cast = {Filter_x_reg[31], Filter_x_reg};
  assign adder_add_cast_1 = {Filter_u_dtc[31], Filter_u_dtc};
  assign adder_add_temp = adder_add_cast + adder_add_cast_1;
  assign Filter_u_add = ((adder_add_temp[32] == 1'b0) && (adder_add_temp[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((adder_add_temp[32] == 1'b1) && (adder_add_temp[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(adder_add_temp[31:0])));

  always @(posedge clk)
    begin : Filter_reg_process
      if (reset == 1'b1) begin
        Filter_x_reg <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb_1_2_0) begin
          Filter_x_reg <= Filter_u_add;
        end
      end
    end

  assign SumD_sub_cast = {Derivative_Gain_out1[31], Derivative_Gain_out1};
  assign SumD_sub_cast_1 = {Filter_x_reg[31], Filter_x_reg};
  assign SumD_sub_temp = SumD_sub_cast - SumD_sub_cast_1;
  assign SumD_out1 = ((SumD_sub_temp[32] == 1'b0) && (SumD_sub_temp[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((SumD_sub_temp[32] == 1'b1) && (SumD_sub_temp[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(SumD_sub_temp[31:0])));

  assign Filter_Coefficient_mul_temp = 32'sb00000000011001000000000000000000 * SumD_out1;
  assign Filter_Coefficient_out1 = ((Filter_Coefficient_mul_temp[63] == 1'b0) && (Filter_Coefficient_mul_temp[62:47] != 16'b0000000000000000) ? 32'sb01111111111111111111111111111111 :
              ((Filter_Coefficient_mul_temp[63] == 1'b1) && (Filter_Coefficient_mul_temp[62:47] != 16'b1111111111111111) ? 32'sb10000000000000000000000000000000 :
              $signed(Filter_Coefficient_mul_temp[47:16])));

  assign fix_for_DT_propagation_issue_out1 = DeadZone_out1 > Clamping_zero_out1;

  assign switch_compare_1_1 = fix_for_DT_propagation_issue_out1 > 1'b0;

  assign Switch1_out1 = (switch_compare_1_1 == 1'b0 ? Constant2_out1 :
              Constant_out1);

  assign Equal1_out1 = Switch1_out1 == Switch2_out1;

  assign DeadZone_out1 = (Sum_out1 >= 32'sb00001111111111110000000000000000 ? Sum_out1 - 32'sb00001111111111110000000000000000 :
              (Sum_out1 <= 32'sb11110000000000010000000000000000 ? Sum_out1 - 32'sb11110000000000010000000000000000 :
              32'sb00000000000000000000000000000000));

  assign Relational_Operator_out1 = Clamping_zero_out1 != DeadZone_out1;

  assign AND3_out1 = Relational_Operator_out1 & Equal1_out1;

  assign switch_compare_1_2 = AND3_out1 > 1'b0;

  assign Switch_out1 = (switch_compare_1_2 == 1'b0 ? Integral_Gain_out1 :
              Constant1_out1);

  assign Integrator_indtc = Switch_out1;

  assign gain1_cast = {Integrator_indtc[31], Integrator_indtc};
  assign Integrator_u_gain = {{6{gain1_cast[32]}}, gain1_cast[32:7]};

  assign Integrator_u_dtc = Integrator_u_gain;

  assign adder1_add_cast = {Integrator_x_reg[31], Integrator_x_reg};
  assign adder1_add_cast_1 = {Integrator_u_dtc[31], Integrator_u_dtc};
  assign adder1_add_temp = adder1_add_cast + adder1_add_cast_1;
  assign Integrator_u_add = ((adder1_add_temp[32] == 1'b0) && (adder1_add_temp[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((adder1_add_temp[32] == 1'b1) && (adder1_add_temp[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(adder1_add_temp[31:0])));

  assign Integrator_u_sat = (Integrator_u_add > 32'sb00000000011001000000000000000000 ? 32'sb00000000011001000000000000000000 :
              (Integrator_u_add < 32'sb11111111100111000000000000000000 ? 32'sb11111111100111000000000000000000 :
              Integrator_u_add));

  always @(posedge clk)
    begin : Integrator_reg_process
      if (reset == 1'b1) begin
        Integrator_x_reg <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb_1_2_0) begin
          Integrator_x_reg <= Integrator_u_sat;
        end
      end
    end

  assign Sum_stage2_add_cast = {Proportional_Gain_out1[31], Proportional_Gain_out1};
  assign Sum_stage2_add_cast_1 = {Integrator_x_reg[31], Integrator_x_reg};
  assign Sum_stage2_add_temp = Sum_stage2_add_cast + Sum_stage2_add_cast_1;
  assign Sum_stage2_cast = ((Sum_stage2_add_temp[32] == 1'b0) && (Sum_stage2_add_temp[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((Sum_stage2_add_temp[32] == 1'b1) && (Sum_stage2_add_temp[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(Sum_stage2_add_temp[31:0])));
  assign Sum_op_stage1 = {Sum_stage2_cast[31], Sum_stage2_cast};

  assign Sum_stage3_add_cast = ((Sum_op_stage1[32] == 1'b0) && (Sum_op_stage1[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((Sum_op_stage1[32] == 1'b1) && (Sum_op_stage1[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(Sum_op_stage1[31:0])));
  assign Sum_stage3_add_cast_1 = {Sum_stage3_add_cast[31], Sum_stage3_add_cast};
  assign Sum_stage3_add_cast_2 = {Filter_Coefficient_out1[31], Filter_Coefficient_out1};
  assign Sum_stage3_add_temp = Sum_stage3_add_cast_1 + Sum_stage3_add_cast_2;
  assign Sum_out1 = ((Sum_stage3_add_temp[32] == 1'b0) && (Sum_stage3_add_temp[31] != 1'b0) ? 32'sb01111111111111111111111111111111 :
              ((Sum_stage3_add_temp[32] == 1'b1) && (Sum_stage3_add_temp[31] != 1'b1) ? 32'sb10000000000000000000000000000000 :
              $signed(Sum_stage3_add_temp[31:0])));

  assign Saturation_out1 = (Sum_out1 > 32'sb00001111111111110000000000000000 ? 32'sb00001111111111110000000000000000 :
              (Sum_out1 < 32'sb11110000000000010000000000000000 ? 32'sb11110000000000010000000000000000 :
              Sum_out1));

  assign y = Saturation_out1;

endmodule  // Discrete_PID_Controller

