// -------------------------------------------------------------
// 
// File Name: /Users/andu/Documents/MATLAB/PID/PID.v
// Created: 2025-05-29 12:54:40
// 
// Generated by MATLAB 24.2, HDL Coder 24.2, and Simulink 24.2
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 0.00390625
// Target subsystem base rate: 0.0078125
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        0.0078125
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Output_rsvd                   ce_out        0.0078125
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: PID
// Source Path: PID
// Hierarchy Level: 0
// Model version: 1.37
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module PID
          (clk,
           reset,
           clk_enable,
           In1,
           ce_out,
           Output_rsvd);


  input   clk;
  input   reset;
  input   clk_enable;
  input   signed [31:0] In1;  // sfix32_En16
  output  ce_out;
  output  signed [31:0] Output_rsvd;  // sfix32_En16


  wire enb_1_2_0;
  wire signed [31:0] afterK;  // sfix32_En16
  wire signed [31:0] error_signal;  // sfix32_En16
  wire signed [31:0] control_action;  // sfix32_En16
  wire signed [31:0] Discrete_Time_Integrator_indtc;  // sfix32
  wire signed [32:0] gain_cast;  // sfix33_En7
  wire signed [31:0] Discrete_Time_Integrator_u_gain;  // sfix32
  wire signed [31:0] Discrete_Time_Integrator_u_dtc;  // sfix32_En16
  reg signed [31:0] integrator1;  // sfix32_En16
  wire signed [31:0] Discrete_Time_Integrator_u_add;  // sfix32_En16
  wire signed [31:0] Discrete_Time_Integrator1_indtc;  // sfix32
  wire signed [32:0] gain1_cast;  // sfix33_En7
  wire signed [31:0] Discrete_Time_Integrator1_u_gain;  // sfix32
  wire signed [31:0] Discrete_Time_Integrator1_u_dtc;  // sfix32_En16
  reg signed [31:0] integrator2;  // sfix32_En16
  wire signed [31:0] Discrete_Time_Integrator1_u_add;  // sfix32_En16
  wire signed [63:0] K_m_mul_temp;  // sfix64_En32


  assign enb_1_2_0 = clk_enable;

  assign error_signal = In1 - afterK;

  Discrete_PID_Controller u_Discrete_PID_Controller (.clk(clk),
                                                     .reset(reset),
                                                     .enb_1_2_0(clk_enable),
                                                     .u(error_signal),  // sfix32_En16
                                                     .y(control_action)  // sfix32_En16
                                                     );

  assign Discrete_Time_Integrator_indtc = control_action;

  assign gain_cast = {Discrete_Time_Integrator_indtc[31], Discrete_Time_Integrator_indtc};
  assign Discrete_Time_Integrator_u_gain = {{6{gain_cast[32]}}, gain_cast[32:7]};

  assign Discrete_Time_Integrator_u_dtc = Discrete_Time_Integrator_u_gain;

  assign Discrete_Time_Integrator_u_add = integrator1 + Discrete_Time_Integrator_u_dtc;

  always @(posedge clk)
    begin : Discrete_Time_Integrator_reg_process
      if (reset == 1'b1) begin
        integrator1 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb_1_2_0) begin
          integrator1 <= Discrete_Time_Integrator_u_add;
        end
      end
    end

  assign Discrete_Time_Integrator1_indtc = integrator1;

  assign gain1_cast = {Discrete_Time_Integrator1_indtc[31], Discrete_Time_Integrator1_indtc};
  assign Discrete_Time_Integrator1_u_gain = {{6{gain1_cast[32]}}, gain1_cast[32:7]};

  assign Discrete_Time_Integrator1_u_dtc = Discrete_Time_Integrator1_u_gain;

  assign Discrete_Time_Integrator1_u_add = integrator2 + Discrete_Time_Integrator1_u_dtc;

  always @(posedge clk)
    begin : Discrete_Time_Integrator1_reg_process
      if (reset == 1'b1) begin
        integrator2 <= 32'sb00000000000000000000000000000000;
      end
      else begin
        if (enb_1_2_0) begin
          integrator2 <= Discrete_Time_Integrator1_u_add;
        end
      end
    end

  assign K_m_mul_temp = 32'sb00000000001001010000100101111011 * integrator2;
  assign afterK = K_m_mul_temp[47:16];

  assign Output_rsvd = afterK;

  assign ce_out = clk_enable;

endmodule  // PID

